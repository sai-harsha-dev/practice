THEORY
-------
- Configmaps store configuration data for cluster wide access.

CHARACTERISTICS
----------------
- Store data in key:value format
- Stored in etcd for cluster wide access.
- Can be accessed accross namespaces.

USES
----
- Decouple configuration inforamtion information from pods, making them more scalable.
- Decouple sensitive information from pods spec, making them more publically sharable.

USING CONFIGMAPS
-----------------
1. CREATE THE CONFIGMAP ----> 2. ACCESS USING ENVIRONMENT VARAIBLE/VOLUMES IN PODS.

------------------------------------------------------------------------------------------
YAML DEFINITIONS
----------------
a. CREATION
------------
apiVersion: v1
kind: ConfigMap
metadata:
 name: <name>
data:
 <key>: <value>
 .
 .
...

b. ACCESS IN PODS USING ENVIRONMENT VARIABLES ===> Doesn't support runtime updation.
----------------------------------------------
1) NORMAL ENV TAG ====> Creates only specified number of enviroment varaible for secret key.                              
------------------                                      
apiVersion: v1                                          
kind: Pod                                               
metadata:                                               
 name: <name>                                           
 labels:
  <key>: <value>
spec:
 containers:
  - name: <name>
    image: <image path>
    env:
     - name: <name of enviroment variable>
       valueFrom:
        configMapRef:
         name: <name of the secret>
         key: <specific key within secret>
    - name: <name of enviroment variable>
       valueFrom:
        secretKeyRef:
         name: <name of the secret>
         key: <specific key within secret>
     .
     .
...

2) ENVFROM TAG ====> Creates enviroment varaible for all keys within the secret.
----------------
apiVersion: v1                                          
kind: Pod                                               
metadata:                                               
 name: <name>                                           
 labels:
  <key>: <value>
spec:
 containers:
  - name: <name>
    image: <image path>
    envFrom:
        configMapRef:
         name: <name of the secret>
         key: <specific key within secret>


c. ACCESS IN PODS USING VOLUMES AS FILES  ===> Supports runtime updation, creates a file per key value.
----------------------------------------
apiVersion: v1                                          
kind: Pod                                               
metadata:                                               
 name: <name>                                           
 labels:
  <key>: <value>
spec:
 volumes:
  - name: <name>
    configMap:
    name: <name of the secret>
 containers:
  - name: <name>
    image: <image path>
    volumeMounts:
      name: <name of the volume>
      mountPath: <path to mount volume>
  ...


--------------------------------------------------------------------------------------------
COMMANDS
--------
CREATION  ---> can be done imperatively and declaritively
--------
 1. FROM LITERALS
 -----------------
 kubectl create configmap <name> \
 --from-literal=<keyname>=<value> .....

 2. FROM FILE
 -------------
 kubectl create configmap <name> \
 --from-file=<file path>
(* define value in key=value format inside the file)

 3. FROM YAML
 -------------
 kubectl apply -f <yaml file path>

DELETION
--------
kubectl delete configmap <name> 
